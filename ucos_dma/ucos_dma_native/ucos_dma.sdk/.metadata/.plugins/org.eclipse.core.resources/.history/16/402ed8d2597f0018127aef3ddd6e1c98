/*
*********************************************************************************************************
*                                            EXAMPLE CODE
*
*                          (c) Copyright 2009-2015; Micrium, Inc.; Weston, FL
*
*               All rights reserved.  Protected by international copyright laws.
*
*               Please feel free to use any application code labeled as 'EXAMPLE CODE' in
*               your application products.  Example code may be used as is, in whole or in
*               part, or may be used as a reference only.
*
*               Please help us continue to provide the Embedded community with the finest
*               software available.  Your honesty is greatly appreciated.
*
*               You can contact us at www.micrium.com.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*                                          SETUP INSTRUCTIONS
*
*   This demonstration project illustrate a basic uC/OS-III project with simple "hello world" output.
*
*   By default some configuration steps are required to compile this example :
*
*   1. Include the require Micrium software components
*       In the BSP setting dialog in the "overview" section of the left pane the following libraries
*       should be added to the BSP :
*
*           ucos_common
*           ucos_osiii
*           ucos_standalone
*
*   2. Kernel tick source - (Not required on the Zynq-7000 PS)
*       If a suitable timer is available in your FPGA design it can be used as the kernel tick source.
*       To do so, in the "ucos" section select a timer for the "kernel_tick_src" configuration option.
*
*   3. STDOUT configuration
*       Output from the print() and UCOS_Print() functions can be redirected to a supported UART. In
*       the "ucos" section the stdout configuration will list the available UARTs.
*
*   Troubleshooting :
*       By default the Xilinx SDK may not have selected the Micrium drivers for the timer and UART.
*       If that is the case they must be manually selected in the drivers configuration section.
*
*       Finally make sure the FPGA is programmed before debugging.
*
*
*   Remember that this example is provided for evaluation purposes only. Commercial development requires
*   a valid license from Micrium.
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                            INCLUDE FILES
*********************************************************************************************************
*/

#include  <stdio.h>
#include  <Source/os.h>
#include  <ucos_bsp.h>
#include  <ucos_int.h>
#include "xaxidma.h"

#define DMA_DEV_ID      XPAR_AXIDMA_0_DEVICE_ID
#define INTC_DEVICE_ID          XPAR_SCUGIC_SINGLE_DEVICE_ID


#define MEM_BASE_ADDR       0x01000000

#define TX_BUFFER_BASE      (MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE      (MEM_BASE_ADDR + 0x00300000)

#define RESET_TIMEOUT_COUNTER   10000
#define MAX_PKT_LEN     4


#define TEST_START_VALUE 3
#define NUMBER_OF_TRANSFERS	10

static  XAxiDma AxiDma;
int TxDone;
int RxDone;
int Error;

int Tries = 6;
int i;
int Index;
u8 *TxBufferPtr= (u8 *)TX_BUFFER_BASE;
u8 *RxBufferPtr= (u8 *)RX_BUFFER_BASE;
u8 Value;
/*
*********************************************************************************************************
*                                      LOCAL FUNCTION PROTOTYPES
*********************************************************************************************************
*/

void  MainTask (void *p_arg);

void    Timer0Task (void *p_arg);
OS_TCB  Timer0TCB;
CPU_STK Timer0TaskStk[512];

OS_SEM  Timer0Semaphore;

void Timer0ISR (void *p_arg, CPU_INT32U cpu);

nt  DMA_Intr_Init(XAxiDma *DMAPtr,u32 DeviceId);
/*
*********************************************************************************************************
*                                               main()
*
* Description : Entry point for C code.
*
*********************************************************************************************************
*/

int main()
{

    UCOSStartup(MainTask);

    return 0;
}


/*
*********************************************************************************************************
*                                             MainTask()
*
* Description : Startup task example code.
*
* Returns     : none.
*
* Created by  : main().
*********************************************************************************************************
*/

void  MainTask (void *p_arg)
{
    OS_ERR       os_err;

    UCOS_Print("Hello world from the main task\r\n");

    OSSemCreate(&Timer0Semaphore, "Timer 0 Semaphore", 0, &os_err);

    OSTaskCreate(&Timer0TCB,
                  "Timer 0 Task",
                  Timer0Task,
                  DEF_NULL,
                  10,
                  Timer0TaskStk,
                  0,
                  512,
                  0,
                  0,
                  DEF_NULL,
                  0,
                 &os_err);


    Timer0 = AXITimer_Init(0);
    AXITimer_OptSet(Timer0, 0, AXITIMER_OPT_DOWN | AXITIMER_OPT_AUTO_RELOAD | AXITIMER_OPT_INT);
    AXITimer_LoadSet(Timer0, 0, 100000000);
    AXITimer_CallbackSet(Timer0, 0, Timer0ISR);
    AXITimer_Start(Timer0, 0);

    XTmrCtr_Initialize(&Timer1, 0);
    XTmrCtr_SetOptions(&Timer1, 0, XTC_DOWN_COUNT_OPTION | XTC_AUTO_RELOAD_OPTION | XTC_INT_MODE_OPTION);
    XTmrCtr_SetResetValue(&Timer1, 0, 50000000);
    UCOS_IntVectSet(62, 0, DEF_BIT_00, Timer1ISR, &Timer1);
    UCOS_IntSrcEn(62);
    XTmrCtr_Start(&Timer1, 0);

    while (DEF_TRUE) {
        OSTimeDlyHMSM(0, 0, 10, 0, OS_OPT_TIME_HMSM_STRICT, &os_err);
        UCOS_Print("Periodic output every 10 seconds from the main task\r\n");
    }

}

void Timer0Task (void *p_arg)
{
    OS_ERR os_err;

    UCOS_Print("Timer0Task reached\r\n");

    while (1) {
        OSSemPend(&Timer0Semaphore, 0, 0, DEF_NULL, &os_err);
        UCOS_Print("Timer 0 Semaphore signaled\r\n");
    }
}

void Timer0ISR (void *p_arg, CPU_INT32U cpu)
    OS_ERR os_err;
    OSSemPost(&Timer0Semaphore, 0, &os_err);
}

void Timer1Task (void *p_arg)
{
    OS_ERR os_err;

    UCOS_Print("Timer1Task reached\r\n");

    while (1) {
        OSSemPend(&Timer1Semaphore, 0, 0, DEF_NULL, &os_err);
        UCOS_Print("Timer 1 Semaphore signaled\r\n");
    }
}

void Timer1ISR (void *p_arg, CPU_INT32U cpu)
{
    CPU_INT32U ControlStatusReg;
    OS_ERR os_err;

    ControlStatusReg = XTmrCtr_ReadReg(Timer1.BaseAddress,
                                       0,
                                       XTC_TCSR_OFFSET);

    XTmrCtr_WriteReg(Timer1.BaseAddress,
                     0,
                     XTC_TCSR_OFFSET,
                     ControlStatusReg |
                     XTC_CSR_INT_OCCURED_MASK);

    OSSemPost(&Timer1Semaphore, 0, &os_err);
}
