-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sub is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_TVALID : IN STD_LOGIC;
    in1_TREADY : OUT STD_LOGIC;
    in1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_TVALID : IN STD_LOGIC;
    in2_TREADY : OUT STD_LOGIC;
    in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sub is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sub,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.436500,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=221,HLS_SYN_LUT=251}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in1_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_data_0_vld_in : STD_LOGIC;
    signal in1_data_0_vld_out : STD_LOGIC;
    signal in1_data_0_ack_in : STD_LOGIC;
    signal in1_data_0_ack_out : STD_LOGIC;
    signal in1_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_data_0_sel_rd : STD_LOGIC := '0';
    signal in1_data_0_sel_wr : STD_LOGIC := '0';
    signal in1_data_0_sel : STD_LOGIC;
    signal in1_data_0_load_A : STD_LOGIC;
    signal in1_data_0_load_B : STD_LOGIC;
    signal in1_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in1_data_0_state_cmp_full : STD_LOGIC;
    signal in1_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_last_V_0_vld_in : STD_LOGIC;
    signal in1_last_V_0_vld_out : STD_LOGIC;
    signal in1_last_V_0_ack_in : STD_LOGIC;
    signal in1_last_V_0_ack_out : STD_LOGIC;
    signal in1_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in1_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in1_last_V_0_sel : STD_LOGIC;
    signal in1_last_V_0_load_A : STD_LOGIC;
    signal in1_last_V_0_load_B : STD_LOGIC;
    signal in1_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in1_last_V_0_state_cmp_full : STD_LOGIC;
    signal in2_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_data_0_vld_in : STD_LOGIC;
    signal in2_data_0_vld_out : STD_LOGIC;
    signal in2_data_0_ack_in : STD_LOGIC;
    signal in2_data_0_ack_out : STD_LOGIC;
    signal in2_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in2_data_0_sel_rd : STD_LOGIC := '0';
    signal in2_data_0_sel_wr : STD_LOGIC := '0';
    signal in2_data_0_sel : STD_LOGIC;
    signal in2_data_0_load_A : STD_LOGIC;
    signal in2_data_0_load_B : STD_LOGIC;
    signal in2_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in2_data_0_state_cmp_full : STD_LOGIC;
    signal in2_last_V_0_vld_in : STD_LOGIC;
    signal in2_last_V_0_ack_out : STD_LOGIC;
    signal in2_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_vld_in : STD_LOGIC;
    signal out_data_1_vld_out : STD_LOGIC;
    signal out_data_1_ack_in : STD_LOGIC;
    signal out_data_1_ack_out : STD_LOGIC;
    signal out_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_1_sel_rd : STD_LOGIC := '0';
    signal out_data_1_sel_wr : STD_LOGIC := '0';
    signal out_data_1_sel : STD_LOGIC;
    signal out_data_1_load_A : STD_LOGIC;
    signal out_data_1_load_B : STD_LOGIC;
    signal out_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_1_state_cmp_full : STD_LOGIC;
    signal out_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_vld_in : STD_LOGIC;
    signal out_last_V_1_vld_out : STD_LOGIC;
    signal out_last_V_1_ack_in : STD_LOGIC;
    signal out_last_V_1_ack_out : STD_LOGIC;
    signal out_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_last_V_1_sel : STD_LOGIC;
    signal out_last_V_1_load_A : STD_LOGIC;
    signal out_last_V_1_load_B : STD_LOGIC;
    signal out_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_last_V_1_state_cmp_full : STD_LOGIC;
    signal in1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal in2_TDATA_blk_n : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal out_data_tmp_fu_75_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in1_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in1_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in1_data_0_ack_out) and (ap_const_logic_1 = in1_data_0_vld_out))) then 
                                        in1_data_0_sel_rd <= not(in1_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in1_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in1_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in1_data_0_vld_in) and (ap_const_logic_1 = in1_data_0_ack_in))) then 
                                        in1_data_0_sel_wr <= not(in1_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in1_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in1_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in1_data_0_vld_in) and (ap_const_logic_1 = in1_data_0_ack_out) and (in1_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in1_data_0_vld_in) and (in1_data_0_state = ap_const_lv2_2)))) then 
                    in1_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in1_data_0_vld_in) and (ap_const_logic_0 = in1_data_0_ack_out) and (in1_data_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in1_data_0_ack_out) and (in1_data_0_state = ap_const_lv2_1)))) then 
                    in1_data_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in1_data_0_vld_in) and (in1_data_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in1_data_0_ack_out) and (in1_data_0_state = ap_const_lv2_1)) or ((in1_data_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in1_data_0_vld_in) and (ap_const_logic_0 = in1_data_0_ack_out))) and not(((ap_const_logic_0 = in1_data_0_vld_in) and (ap_const_logic_1 = in1_data_0_ack_out)))))) then 
                    in1_data_0_state <= ap_const_lv2_3;
                else 
                    in1_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in1_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in1_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in1_last_V_0_ack_out) and (ap_const_logic_1 = in1_last_V_0_vld_out))) then 
                                        in1_last_V_0_sel_rd <= not(in1_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in1_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in1_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in1_last_V_0_vld_in) and (ap_const_logic_1 = in1_last_V_0_ack_in))) then 
                                        in1_last_V_0_sel_wr <= not(in1_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in1_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in1_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in1_last_V_0_vld_in) and (ap_const_logic_1 = in1_last_V_0_ack_out) and (ap_const_lv2_3 = in1_last_V_0_state)) or ((ap_const_logic_0 = in1_last_V_0_vld_in) and (ap_const_lv2_2 = in1_last_V_0_state)))) then 
                    in1_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in1_last_V_0_vld_in) and (ap_const_logic_0 = in1_last_V_0_ack_out) and (ap_const_lv2_3 = in1_last_V_0_state)) or ((ap_const_logic_0 = in1_last_V_0_ack_out) and (ap_const_lv2_1 = in1_last_V_0_state)))) then 
                    in1_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in1_last_V_0_vld_in) and (ap_const_lv2_2 = in1_last_V_0_state)) or ((ap_const_logic_1 = in1_last_V_0_ack_out) and (ap_const_lv2_1 = in1_last_V_0_state)) or ((ap_const_lv2_3 = in1_last_V_0_state) and not(((ap_const_logic_1 = in1_last_V_0_vld_in) and (ap_const_logic_0 = in1_last_V_0_ack_out))) and not(((ap_const_logic_0 = in1_last_V_0_vld_in) and (ap_const_logic_1 = in1_last_V_0_ack_out)))))) then 
                    in1_last_V_0_state <= ap_const_lv2_3;
                else 
                    in1_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in2_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in2_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in2_data_0_ack_out) and (ap_const_logic_1 = in2_data_0_vld_out))) then 
                                        in2_data_0_sel_rd <= not(in2_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in2_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in2_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in2_data_0_vld_in) and (ap_const_logic_1 = in2_data_0_ack_in))) then 
                                        in2_data_0_sel_wr <= not(in2_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in2_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in2_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in2_data_0_vld_in) and (ap_const_logic_1 = in2_data_0_ack_out) and (ap_const_lv2_3 = in2_data_0_state)) or ((ap_const_logic_0 = in2_data_0_vld_in) and (ap_const_lv2_2 = in2_data_0_state)))) then 
                    in2_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in2_data_0_vld_in) and (ap_const_logic_0 = in2_data_0_ack_out) and (ap_const_lv2_3 = in2_data_0_state)) or ((ap_const_logic_0 = in2_data_0_ack_out) and (ap_const_lv2_1 = in2_data_0_state)))) then 
                    in2_data_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in2_data_0_vld_in) and (ap_const_lv2_2 = in2_data_0_state)) or ((ap_const_logic_1 = in2_data_0_ack_out) and (ap_const_lv2_1 = in2_data_0_state)) or ((ap_const_lv2_3 = in2_data_0_state) and not(((ap_const_logic_1 = in2_data_0_vld_in) and (ap_const_logic_0 = in2_data_0_ack_out))) and not(((ap_const_logic_0 = in2_data_0_vld_in) and (ap_const_logic_1 = in2_data_0_ack_out)))))) then 
                    in2_data_0_state <= ap_const_lv2_3;
                else 
                    in2_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in2_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in2_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in2_last_V_0_vld_in) and (ap_const_logic_1 = in2_last_V_0_ack_out) and (ap_const_lv2_3 = in2_last_V_0_state)) or ((ap_const_logic_0 = in2_last_V_0_vld_in) and (ap_const_lv2_2 = in2_last_V_0_state)))) then 
                    in2_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in2_last_V_0_vld_in) and (ap_const_logic_0 = in2_last_V_0_ack_out) and (ap_const_lv2_3 = in2_last_V_0_state)) or ((ap_const_logic_0 = in2_last_V_0_ack_out) and (ap_const_lv2_1 = in2_last_V_0_state)))) then 
                    in2_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in2_last_V_0_vld_in) and (ap_const_lv2_2 = in2_last_V_0_state)) or ((ap_const_logic_1 = in2_last_V_0_ack_out) and (ap_const_lv2_1 = in2_last_V_0_state)) or ((ap_const_lv2_3 = in2_last_V_0_state) and not(((ap_const_logic_1 = in2_last_V_0_vld_in) and (ap_const_logic_0 = in2_last_V_0_ack_out))) and not(((ap_const_logic_0 = in2_last_V_0_vld_in) and (ap_const_logic_1 = in2_last_V_0_ack_out)))))) then 
                    in2_last_V_0_state <= ap_const_lv2_3;
                else 
                    in2_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_data_1_ack_out) and (ap_const_logic_1 = out_data_1_vld_out))) then 
                                        out_data_1_sel_rd <= not(out_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_data_1_vld_in) and (ap_const_logic_1 = out_data_1_ack_in))) then 
                                        out_data_1_sel_wr <= not(out_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_data_1_vld_in) and (ap_const_logic_1 = out_data_1_ack_out) and (ap_const_lv2_3 = out_data_1_state)) or ((ap_const_logic_0 = out_data_1_vld_in) and (ap_const_lv2_2 = out_data_1_state)))) then 
                    out_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_data_1_vld_in) and (ap_const_logic_0 = out_data_1_ack_out) and (ap_const_lv2_3 = out_data_1_state)) or ((ap_const_logic_0 = out_data_1_ack_out) and (ap_const_lv2_1 = out_data_1_state)))) then 
                    out_data_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_data_1_vld_in) and (ap_const_lv2_2 = out_data_1_state)) or ((ap_const_logic_1 = out_data_1_ack_out) and (ap_const_lv2_1 = out_data_1_state)) or ((ap_const_lv2_3 = out_data_1_state) and not(((ap_const_logic_1 = out_data_1_vld_in) and (ap_const_logic_0 = out_data_1_ack_out))) and not(((ap_const_logic_0 = out_data_1_vld_in) and (ap_const_logic_1 = out_data_1_ack_out)))))) then 
                    out_data_1_state <= ap_const_lv2_3;
                else 
                    out_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_last_V_1_ack_out) and (ap_const_logic_1 = out_last_V_1_vld_out))) then 
                                        out_last_V_1_sel_rd <= not(out_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_logic_1 = out_last_V_1_ack_in))) then 
                                        out_last_V_1_sel_wr <= not(out_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_last_V_1_vld_in) and (ap_const_logic_1 = out_last_V_1_ack_out) and (ap_const_lv2_3 = out_last_V_1_state)) or ((ap_const_logic_0 = out_last_V_1_vld_in) and (ap_const_lv2_2 = out_last_V_1_state)))) then 
                    out_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_logic_0 = out_last_V_1_ack_out) and (ap_const_lv2_3 = out_last_V_1_state)) or ((ap_const_logic_0 = out_last_V_1_ack_out) and (ap_const_lv2_1 = out_last_V_1_state)))) then 
                    out_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_lv2_2 = out_last_V_1_state)) or ((ap_const_logic_1 = out_last_V_1_ack_out) and (ap_const_lv2_1 = out_last_V_1_state)) or ((ap_const_lv2_3 = out_last_V_1_state) and not(((ap_const_logic_1 = out_last_V_1_vld_in) and (ap_const_logic_0 = out_last_V_1_ack_out))) and not(((ap_const_logic_0 = out_last_V_1_vld_in) and (ap_const_logic_1 = out_last_V_1_ack_out)))))) then 
                    out_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in1_data_0_load_A)) then
                in1_data_0_payload_A <= in1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in1_data_0_load_B)) then
                in1_data_0_payload_B <= in1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in1_last_V_0_load_A)) then
                in1_last_V_0_payload_A <= in1_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in1_last_V_0_load_B)) then
                in1_last_V_0_payload_B <= in1_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in2_data_0_load_A)) then
                in2_data_0_payload_A <= in2_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in2_data_0_load_B)) then
                in2_data_0_payload_B <= in2_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_data_1_load_A)) then
                out_data_1_payload_A <= out_data_tmp_fu_75_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_data_1_load_B)) then
                out_data_1_payload_B <= out_data_tmp_fu_75_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_last_V_1_load_A)) then
                out_last_V_1_payload_A <= in1_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_last_V_1_load_B)) then
                out_last_V_1_payload_B <= in1_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, out_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and not(((ap_const_logic_0 = out_data_1_ack_in) or (ap_const_logic_0 = out_last_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out));
    end process;


    ap_block_state3_assign_proc : process(out_data_1_ack_in, out_last_V_1_ack_in)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = out_data_1_ack_in) or (ap_const_logic_0 = out_last_V_1_ack_in));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    in1_TDATA_blk_n_assign_proc : process(in1_data_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in1_TDATA_blk_n <= in1_data_0_state(0);
        else 
            in1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_TREADY <= in1_last_V_0_state(1);
    in1_data_0_ack_in <= in1_data_0_state(1);

    in1_data_0_ack_out_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then 
            in1_data_0_ack_out <= ap_const_logic_1;
        else 
            in1_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in1_data_0_data_out_assign_proc : process(in1_data_0_payload_A, in1_data_0_payload_B, in1_data_0_sel)
    begin
        if ((ap_const_logic_1 = in1_data_0_sel)) then 
            in1_data_0_data_out <= in1_data_0_payload_B;
        else 
            in1_data_0_data_out <= in1_data_0_payload_A;
        end if; 
    end process;

    in1_data_0_load_A <= (in1_data_0_state_cmp_full and not(in1_data_0_sel_wr));
    in1_data_0_load_B <= (in1_data_0_sel_wr and in1_data_0_state_cmp_full);
    in1_data_0_sel <= in1_data_0_sel_rd;
    in1_data_0_state_cmp_full <= '0' when (in1_data_0_state = ap_const_lv2_1) else '1';
    in1_data_0_vld_in <= in1_TVALID;
    in1_data_0_vld_out <= in1_data_0_state(0);
    in1_last_V_0_ack_in <= in1_last_V_0_state(1);

    in1_last_V_0_ack_out_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then 
            in1_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in1_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in1_last_V_0_data_out_assign_proc : process(in1_last_V_0_payload_A, in1_last_V_0_payload_B, in1_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = in1_last_V_0_sel)) then 
            in1_last_V_0_data_out <= in1_last_V_0_payload_B;
        else 
            in1_last_V_0_data_out <= in1_last_V_0_payload_A;
        end if; 
    end process;

    in1_last_V_0_load_A <= (in1_last_V_0_state_cmp_full and not(in1_last_V_0_sel_wr));
    in1_last_V_0_load_B <= (in1_last_V_0_sel_wr and in1_last_V_0_state_cmp_full);
    in1_last_V_0_sel <= in1_last_V_0_sel_rd;
    in1_last_V_0_state_cmp_full <= '0' when (in1_last_V_0_state = ap_const_lv2_1) else '1';
    in1_last_V_0_vld_in <= in1_TVALID;
    in1_last_V_0_vld_out <= in1_last_V_0_state(0);

    in2_TDATA_blk_n_assign_proc : process(in2_data_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in2_TDATA_blk_n <= in2_data_0_state(0);
        else 
            in2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_TREADY <= in2_last_V_0_state(1);
    in2_data_0_ack_in <= in2_data_0_state(1);

    in2_data_0_ack_out_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then 
            in2_data_0_ack_out <= ap_const_logic_1;
        else 
            in2_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in2_data_0_data_out_assign_proc : process(in2_data_0_payload_A, in2_data_0_payload_B, in2_data_0_sel)
    begin
        if ((ap_const_logic_1 = in2_data_0_sel)) then 
            in2_data_0_data_out <= in2_data_0_payload_B;
        else 
            in2_data_0_data_out <= in2_data_0_payload_A;
        end if; 
    end process;

    in2_data_0_load_A <= (in2_data_0_state_cmp_full and not(in2_data_0_sel_wr));
    in2_data_0_load_B <= (in2_data_0_sel_wr and in2_data_0_state_cmp_full);
    in2_data_0_sel <= in2_data_0_sel_rd;
    in2_data_0_state_cmp_full <= '0' when (in2_data_0_state = ap_const_lv2_1) else '1';
    in2_data_0_vld_in <= in2_TVALID;
    in2_data_0_vld_out <= in2_data_0_state(0);

    in2_last_V_0_ack_out_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then 
            in2_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in2_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in2_last_V_0_vld_in <= in2_TVALID;
    out_data_1_ack_in <= out_data_1_state(1);
    out_data_1_ack_out <= out_r_TREADY;

    out_data_1_data_out_assign_proc : process(out_data_1_payload_A, out_data_1_payload_B, out_data_1_sel)
    begin
        if ((ap_const_logic_1 = out_data_1_sel)) then 
            out_data_1_data_out <= out_data_1_payload_B;
        else 
            out_data_1_data_out <= out_data_1_payload_A;
        end if; 
    end process;

    out_data_1_load_A <= (out_data_1_state_cmp_full and not(out_data_1_sel_wr));
    out_data_1_load_B <= (out_data_1_sel_wr and out_data_1_state_cmp_full);
    out_data_1_sel <= out_data_1_sel_rd;
    out_data_1_state_cmp_full <= '0' when (out_data_1_state = ap_const_lv2_1) else '1';

    out_data_1_vld_in_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then 
            out_data_1_vld_in <= ap_const_logic_1;
        else 
            out_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_1_vld_out <= out_data_1_state(0);
    out_data_tmp_fu_75_p2 <= std_logic_vector(unsigned(in1_data_0_data_out) - unsigned(in2_data_0_data_out));
    out_last_V_1_ack_in <= out_last_V_1_state(1);
    out_last_V_1_ack_out <= out_r_TREADY;

    out_last_V_1_data_out_assign_proc : process(out_last_V_1_payload_A, out_last_V_1_payload_B, out_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_last_V_1_sel)) then 
            out_last_V_1_data_out <= out_last_V_1_payload_B;
        else 
            out_last_V_1_data_out <= out_last_V_1_payload_A;
        end if; 
    end process;

    out_last_V_1_load_A <= (out_last_V_1_state_cmp_full and not(out_last_V_1_sel_wr));
    out_last_V_1_load_B <= (out_last_V_1_sel_wr and out_last_V_1_state_cmp_full);
    out_last_V_1_sel <= out_last_V_1_sel_rd;
    out_last_V_1_state_cmp_full <= '0' when (out_last_V_1_state = ap_const_lv2_1) else '1';

    out_last_V_1_vld_in_assign_proc : process(in1_data_0_vld_out, in2_data_0_vld_out, out_data_1_ack_in, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = in1_data_0_vld_out) or (ap_const_logic_0 = in2_data_0_vld_out) or (ap_const_logic_0 = out_data_1_ack_in))))) then 
            out_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_last_V_1_vld_out <= out_last_V_1_state(0);
    out_r_TDATA <= out_data_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_data_1_state, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_r_TDATA_blk_n <= out_data_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TLAST <= out_last_V_1_data_out;
    out_r_TVALID <= out_last_V_1_state(0);
end behav;
